//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.14

use sea_orm::entity::prelude::*;
use sea_orm::sea_query;
use serde::{Deserialize, Serialize};

#[derive(EnumIter, DeriveActiveEnum, Serialize, Deserialize, Debug, Clone, PartialEq, Eq, Iden)]
#[sea_orm(rs_type = "i32", db_type = "Integer")]
pub enum MailAccountType {
    Gmail = 1,
    Outlook = 2,
    Microsoft365 = 3,
    Icloud = 4,
    Yi = 5,
    Exchange = 6,
    Yahoo = 7,
    Imap = 8,
    Other = 9,
}

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "account")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub mail_address: String,
    pub status: i32,
    pub last_update_date: i32,
    pub token: Option<String>,
    pub refresh_token: Option<String>,
    pub mail_type: MailAccountType,
    pub nick_name: Option<String>,
    pub token_refresh_date: i64,
}

// mail_type: 1: Gmail, 2: Outlook, 3: Yahoo, 4: iCloud, 5: Other

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl ActiveModelBehavior for ActiveModel {}

impl Model {
    pub fn new() -> Self {
        Self {
            id: 0,
            mail_address: "".to_string(),
            status: 0,
            last_update_date: 0,
            token: None,
            refresh_token: None,
            mail_type: MailAccountType::Imap,
            nick_name: None,
            token_refresh_date: 0,
        }
    }
    pub fn new_with_all(
        id: i32,
        mail_address: String,
        status: i32,
        last_update_date: i32,
        token: Option<String>,
        refresh_token: Option<String>,
        mail_type: MailAccountType,
        nick_name: Option<String>,
        token_refresh_date: i64,
    ) -> Self {
        Self {
            id,
            mail_address,
            status,
            last_update_date,
            token,
            refresh_token,
            mail_type,
            nick_name,
            token_refresh_date,
        }
    }
}
